/*
 * Linetracer.c
 *
 * Created: 2017-08-03 오후 5:29:03
 * Author : KBS
 */ 

#include <avr/io.h>
#include <avr/interrupt.h>
#include <stdio.h>

#define READY					0
#define R_READY					1
#define R_READY2				2
#define L_READY					3
#define L_READY2				4
#define STRAIGHT				5
#define R_STRAIGHT_CORRECTION	6
#define R_STRAIGHT_CORRECTION2	7
#define R_TURN					8
#define R_TURN2					9
#define R_TURN3					10
#define L_STRAIGHT_CORRECTION	11
#define L_STRAIGHT_CORRECTION2	12
#define L_TURN					13
#define L_TURN2					14
#define L_TURN3					15
#define STOP					16

#define R_TURN4					17
#define L_TURN4					18

#define SHIFT					15


volatile unsigned char L = 0;
volatile unsigned char R = 0;
volatile unsigned char left_step[4] = {0x50,0x60,0xa0,0x90};
volatile unsigned char right_step[4] = {0x09,0x0a,0x06,0x05};

volatile unsigned int i = 0;
volatile int Sensor_RAW[8]; 
volatile int Sensor_MAX[8] = {0,0,0,0,0,0,0,0};
volatile int Sensor_MIN[8] = {255,255,255,255,255,255,255,255};
volatile int Sensor_CONVER[8] = {0,0,0,0,0,0,0,0};

volatile int Sensor_Position_mm[8] = {-72 ,-32, -20, -7, 7, 20, 32, 72};
volatile int Sensor_Sum = 0;
volatile int Sensor_Position_Sum = 0;
volatile int Sensor_ON_cnt = 0;
volatile unsigned char sensor_number = 0;

volatile unsigned int timer0_cnt = 0;
volatile unsigned int timer0_cnt2 = 0;
volatile unsigned int timer0_cnt3 = 0;
volatile unsigned int timer0_cnt4 = 0;
volatile unsigned int timer0_cnt5 = 0;


volatile unsigned int L_OCR_table = 40;
volatile unsigned int R_OCR_table = 40;
volatile unsigned int L_OCR_target = 0;
volatile unsigned int R_OCR_target = 0;

volatile unsigned int RUN_MODE = 0;
volatile unsigned int MOTOR_MODE = 0;
volatile unsigned int ready_flag = 0;
volatile unsigned int Stop_flag = 0;
volatile unsigned int Stop_flag_cnt = 0;
volatile unsigned int Cross_flag = 0;

volatile int shift_adjust = 0;

void port_init(void);
void uart0_init(void);
void uart1_init(void);
void adc_init(void);
void timer_init(void);
void init_devices(void);

void tx0Char(char message);
void tx1Char(char message);
void delays(int n);

void Sensor_MIN_MAX();
void Sensor_Calibration();
void Motor_Control();
void Start();


 const unsigned int m_TimeTable[1000]= {
	 //[Accelator = 6]
	 9224,   3820,   2931,   2471,   2177,   1968,   1810,   1685,   1582,   1496,
	 1423,   1360,   1304,   1255,   1211,   1171,   1135,   1102,   1072,   1044,
	 1018,    994,    972,    951,    931,    913,    895,    879,    863,    849,
	 835,    821,    809,    796,    785,    774,    763,    753,    743,    733,
	 724,    715,    707,    699,    691,    683,    676,    669,    662,    655,
	 649,    642,    636,    630,    624,    619,    613,    608,    603,    597,
	 592,    588,    583,    578,    574,    569,    565,    561,    557,    553,
	 549,    545,    541,    537,    534,    530,    527,    523,    520,    517,
	 514,    510,    507,    504,    501,    498,    495,    493,    490,    487,
	 484,    482,    479,    476,    474,    471,    469,    467,    464,    462, // 100
	 460,    457,    455,    453,    451,    449,    446,    444,    442,    440,
	 438,    436,    434,    432,    431,    429,    427,    425,    423,    421,
	 420,    418,    416,    415,    413,    411,    410,    408,    406,    405,
	 403,    402,    400,    399,    397,    396,    394,    393,    391,    390,
	 389,    387,    386,    385,    383,    382,    381,    379,    378,    377,
	 375,    374,    373,    372,    371,    369,    368,    367,    366,    365,
	 364,    362,    361,    360,    359,    358,    357,    356,    355,    354,
	 353,    352,    351,    350,    349,    348,    347,    346,    345,    344,
	 343,    342,    341,    340,    339,    338,    337,    336,    335,    335,
	 334,    333,    332,    331,    330,    329,    329,    328,    327,    326, // 200
	 325,    324,    324,    323,    322,    321,    320,    320,    319,    318,
	 317,    317,    316,    315,    314,    314,    313,    312,    312,    311,
	 310,    309,    309,    308,    307,    307,    306,    305,    305,    304,
	 303,    303,    302,    301,    301,    300,    299,    299,    298,    298,
	 297,    296,    296,    295,    294,    294,    293,    293,    292,    291,
	 291,    290,    290,    289,    289,    288,    287,    287,    286,    286,
	 285,    285,    284,    284,    283,    283,    282,    281,    281,    280,
	 280,    279,    279,    278,    278,    277,    277,    276,    276,    275,
	 275,    274,    274,    273,    273,    272,    272,    272,    271,    271,
	 270,    270,    269,    269,    268,    268,    267,    267,    266,    266, // 300
	 266,    265,    265,    264,    264,    263,    263,    263,    262,    262,
	 261,    261,    260,    260,    260,    259,    259,    258,    258,    258,
	 257,    257,    256,    256,    256,    255,    255,    254,    254,    254,
	 253,    253,    252,    252,    252,    251,    251,    251,    250,    250,
	 249,    249,    249,    248,    248,    248,    247,    247,    247,    246,
	 246,    245,    245,    245,    244,    244,    244,    243,    243,    243,
	 242,    242,    242,    241,    241,    241,    240,    240,    240,    239,
	 239,    239,    238,    238,    238,    238,    237,    237,    237,    236,
	 236,    236,    235,    235,    235,    234,    234,    234,    233,    233,
	 233,    233,    232,    232,    232,    231,    231,    231,    231,    230, // 400
	 230,    230,    229,    229,    229,    229,    228,    228,    228,    227,
	 227,    227,    227,    226,    226,    226,    225,    225,    225,    225,
	 224,    224,    224,    224,    223,    223,    223,    223,    222,    222,
	 222,    222,    221,    221,    221,    221,    220,    220,    220,    219,
	 219,    219,    219,    219,    218,    218,    218,    218,    217,    217,
	 217,    217,    216,    216,    216,    216,    215,    215,    215,    215,
	 214,    214,    214,    214,    213,    213,    213,    213,    213,    212,
	 212,    212,    212,    211,    211,    211,    211,    211,    210,    210,
	 210,    210,    209,    209,    209,    209,    209,    208,    208,    208,
	 208,    208,    207,    207,    207,    207,    206,    206,    206,    206, // 500
	 206,    205,    205,    205,    205,    205,    204,    204,    204,    204,
	 204,    203,    203,    203,    203,    203,    202,    202,    202,    202,
	 202,    201,    201,    201,    201,    201,    201,    200,    200,    200,
	 200,    200,    199,    199,    199,    199,    199,    198,    198,    198,
	 198,    198,    198,    197,    197,    197,    197,    197,    196,    196,
	 196,    196,    196,    196,    195,    195,    195,    195,    195,    194,
	 194,    194,    194,    194,    194,    193,    193,    193,    193,    193,
	 193,    192,    192,    192,    192,    192,    192,    191,    191,    191,
	 191,    191,    191,    190,    190,    190,    190,    190,    190,    189,
	 189,    189,    189,    189,    189,    188,    188,    188,    188,    188, // 600
	 188,    188,    187,    187,    187,    187,    187,    187,    186,    186,
	 186,    186,    186,    186,    186,    185,    185,    185,    185,    185,
	 185,    185,    184,    184,    184,    184,    184,    184,    183,    183,
	 183,    183,    183,    183,    183,    182,    182,    182,    182,    182,
	 182,    182,    181,    181,    181,    181,    181,    181,    181,    180,
	 180,    180,    180,    180,    180,    180,    180,    179,    179,    179,
	 179,    179,    179,    179,    178,    178,    178,    178,    178,    178,
	 178,    177,    177,    177,    177,    177,    177,    177,    177,    176,
	 176,    176,    176,    176,    176,    176,    176,    175,    175,    175,
	 175,    175,    175,    175,    175,    174,    174,    174,    174,    174, // 700
	 174,    174,    174,    173,    173,    173,    173,    173,    173,    173,
	 173,    172,    172,    172,    172,    172,    172,    172,    172,    171,
	 171,    171,    171,    171,    171,    171,    171,    170,    170,    170,
	 170,    170,    170,    170,    170,    170,    169,    169,    169,    169,
	 169,    169,    169,    169,    169,    168,    168,    168,    168,    168,
	 168,    168,    168,    168,    167,    167,    167,    167,    167,    167,
	 167,    167,    167,    166,    166,    166,    166,    166,    166,    166,
	 166,    166,    165,    165,    165,    165,    165,    165,    165,    165,
	 165,    164,    164,    164,    164,    164,    164,    164,    164,    164,
	 164,    163,    163,    163,    163,    163,    163,    163,    163,    163, // 800
	 163,    162,    162,    162,    162,    162,    162,    162,    162,    162,
	 162,    161,    161,    161,    161,    161,    161,    161,    161,    161,
	 161,    160,    160,    160,    160,    160,    160,    160,    160,    160,
	 160,    159,    159,    159,    159,    159,    159,    159,    159,    159,
	 159,    158,    158,    158,    158,    158,    158,    158,    158,    158,
	 158,    158,    157,    157,    157,    157,    157,    157,    157,    157,
	 157,    157,    157,    156,    156,    156,    156,    156,    156,    156,
	 156,    156,    156,    156,    155,    155,    155,    155,    155,    155,
	 155,    155,    155,    155,    155,    154,    154,    154,    154,    154,
	 154,    154,    154,    154,    154,    154,    154,    153,    153,    153, // 900
	 153,    153,    153,    153,    153,    153,    153,    153,    153,    152,
	 152,    152,    152,    152,    152,    152,    152,    152,    152,    152,
	 152,    151,    151,    151,    151,    151,    151,    151,    151,    151,
	 151,    151,    151,    150,    150,    150,    150,    150,    150,    150,
	 150,    150,    150,    150,    150,    149,    149,    149,    149,    149,
	 149,    149,    149,    149,    149,    149,    149,    149,    148,    148,
	 148,    148,    148,    148,    148,    148,    148,    148,    148,    148,
	 148,    147,    147,    147,    147,    147,    147,    147,    147,    147,
	 147,    147,    147,    147,    146,    146,    146,    146,    146,    146,
	 146,    146,    146,    146,    146,    146,    146,    146,    145,    145, // 1000
 };

void delays(int n)
{
	volatile int i,j;
	for(i=1;i<n;i++)
	{
		for(j=1;j<600;j++);
	}
}

void port_init(void)
{
	//MOTOR
	PORTA = 0x00;
	DDRA  = 0xFF;
	//LED
	PORTB = 0x00;
	DDRB  = 0xFF;
	// BUZZER
	PORTC = 0x00; 
	DDRC  = 0x40;
	//
	PORTD = 0x00;
	DDRD  = 0xff;
	// 2013 SWITCH 4567
	PORTE = 0x00;
	DDRE  = 0x00;
	//SENSOR
	PORTF = 0x00;
	DDRF  = 0x00;
	//
	PORTG = 0x00;
	DDRG  = 0x00;
}

//UART0 initialize
// desired baud rate: 9600
// actual: baud rate:9615 (0.2%)
// char size: 8 bit
// parity: Disabled
void uart0_init(void)
{
	UCSR0B = 0x00; //disable while setting baud rate
	UCSR0A = 0x00;
	UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00); 

	UBRR0L = 0x67; //set baud rate lo  // 106
	UBRR0H = 0x00; //set baud rate hi

	UCSR0B |= (1<<TXEN0); // Transmitter Enable
}

//UART1 initialize
// desired baud rate:9600
// actual baud rate:9615 (0.2%)
// char size: 8 bit
// parity: Disabled
// void uart1_init(void)
// {
// 	UCSR1B = 0x00; //disable while setting baud rate
// 	UCSR1A = 0x00;
// 	UCSR1C |= (1<<UCSZ11)|(1<<UCSZ10); 
// 	// UBRR1L = 0x2F; //set baud rate lo 7.3728 MHz
// 	// UBRR1L = 0x47; //set baud rate lo 11.0592 Mhz
// 	UBRR1L = 0x67; //set baud rate lo 16Mhz
// 	UBRR1H = 0x00; //set baud rate hi
// 
// 	UCSR1B |= (1<<TXEN1); // Transmitter Enable
// }

void adc_init(void)
{
	ADCSRA |= ((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)|(0<<ADIE)); //16Mhz/128 = 125Khz
	ADMUX |= (0<<REFS1)|(1<<REFS0)|(0<<ADLAR); //AVCC(5V)
	ADCSRA |= (1<<ADEN);      //ADC 인에이블
}

char readAdc(int channel)  //값을 읽어오는 함수
{
	ADMUX &= 0xF0;
	ADMUX |= channel;
	
	ADCSRA |= (1<<ADSC);      //변환 시작
	while(ADCSRA&(1<<ADSC));//변환 완료되기를 기다림.
	return ADCW;  //ADC값 반환
}

// static int Putchar(char c, FILE *stream)
// {
// 	tx0Char(c);
// 	tx1Char(c);
// 	return 0;
// }

// UART0 출력
void tx0Char(char message)
{
	while (((UCSR0A>>UDRE0)&0x01) == 0) ;  // UDRE, data register empty
	UDR0 = message;
}

// UART1 출력
// void tx1Char(char message)
// {
// 	while (((UCSR1A>>UDRE1)&0x01) == 0) ;  // UDRE, data register empty
// 	UDR1 = message;
// }

void timer_init(void)
{
	TCCR0 |= (0<<WGM00)|(1<<WGM01) | (1<<CS02)|(0<<CS01)|(0<<CS00); // CTC, clk/64

	TCCR1A |= (0<<WGM11)|(0<<WGM10);
	TCCR1B |= (0<<WGM13)|(1<<WGM12) | (0<<CS12)|(1<<CS11)|(1<<CS10); // clk/64
	TCCR1C = 0x00;
	TCCR3A |= (0<<WGM31)|(0<<WGM30);
	TCCR3B |= (0<<WGM33)|(1<<WGM32) | (0<<CS32)|(1<<CS31)|(1<<CS30); // clk/64
	TCCR3C = 0x00;

//	TCNT0 = 6; // 1ms
//	TCNT0 = 231; // 0.1ms
	OCR0 = 25; // 0.1ms

//	OCR1A = 28799;
//  OCR1A = 500;
//  OCR3A = 500;

	TIMSK |= (1<<OCIE0);
	TIMSK |= (0<<OCIE1A); // timer1 disable
	ETIMSK |= (0<<OCIE3A); // timer3 disable
}

ISR(TIMER1_COMPA_vect)
{
	PORTA = left_step[L] | (PORTA & 0x0f);
	L++;
	if(L>3) L=0;

	OCR1A = m_TimeTable[L_OCR_table];
	if(L_OCR_table < L_OCR_target)	L_OCR_table += SHIFT - shift_adjust;
	if(L_OCR_table > L_OCR_target)	L_OCR_table -= SHIFT - shift_adjust;
}

ISR(TIMER3_COMPA_vect)
{
	PORTA = right_step[R] | (PORTA & 0xf0);
	R++;
	if(R>3) R=0;

	OCR3A = m_TimeTable[R_OCR_table];
	if(R_OCR_table < R_OCR_target)	R_OCR_table += SHIFT - shift_adjust;
	if(R_OCR_table > R_OCR_target)	R_OCR_table -= SHIFT - shift_adjust;
}

ISR(TIMER0_COMP_vect)
{
	if((RUN_MODE == 1) && (ready_flag == 0))
	{	
		shift_adjust = 10;
		timer0_cnt++;
		if(timer0_cnt > 5000) // 0.5sec
		{	
			shift_adjust = 0;
			ready_flag = 1;
		}
	}
	else if(RUN_MODE == 2)
	{
		timer0_cnt3++;
		if(timer0_cnt3 > 5000) // 0.5sec
		{
			RUN_MODE = 1;
			timer0_cnt3 = 0;
		}
	}

	if((Stop_flag == 1) || (Stop_flag == 2))
	{
		timer0_cnt2++;
		if((timer0_cnt2 > 700) && (timer0_cnt2 < 1700)) // 0.1sec
		{
			Stop_flag = 2;
		}
		else if(timer0_cnt2 > 700)
		{
			PORTA = 0x00;
			TIMSK &= (0<<OCIE1A); // timer1 disable
			ETIMSK &= (0<<OCIE3A); // timer3 disable
		}
	}


	if((PINE & 0xf0) == 0xe0)
		Sensor_MIN_MAX(sensor_number);

// 	if((PINE & 0xf0) == 0xb0)
// 		Start();
	// 4 0xe0
	// 5 0xd0
	// 6 0xb0
	// 7 0x70
}


void Sensor_MIN_MAX(int sensor_number)
{
	if(Sensor_RAW[sensor_number] > Sensor_MAX[sensor_number])	Sensor_MAX[sensor_number] = Sensor_RAW[sensor_number];
	if(Sensor_RAW[sensor_number] < Sensor_MIN[sensor_number])	Sensor_MIN[sensor_number] = Sensor_RAW[sensor_number];
}

void Sensor_Calibration()
{
	Sensor_CONVER[sensor_number] = ((Sensor_RAW[sensor_number] - Sensor_MIN[sensor_number]) * 100) / (Sensor_MAX[sensor_number] - Sensor_MIN[sensor_number]);

	if(Sensor_CONVER[sensor_number] < 0)	Sensor_CONVER[sensor_number] = 0;
	if(Sensor_CONVER[sensor_number] > 100)	Sensor_CONVER[sensor_number] = 100;

	if(Sensor_CONVER[sensor_number] < 40)
		Sensor_CONVER[sensor_number] = 0;


	//tx0Char(' ');
// 	tx0Char(Sensor_CONVER[sensor_number]/100 + '0');
// 	tx0Char((Sensor_CONVER[sensor_number]%100)/10 + '0');
// 	tx0Char(Sensor_CONVER[sensor_number]%10 + '0');
// 	tx0Char(' ');

// 	tx0Char(Sensor_Position_Sum/1000 + '0');
// 	tx0Char((Sensor_Position_Sum%1000)/100 + '0');
// 	tx0Char((Sensor_Position_Sum%100)/10 + '0');
// 	tx0Char(Sensor_Position_Sum%10 + '0');
// 	tx0Char(' ');


	sensor_number++;
	if(sensor_number==8)
	{
		Sensor_ON_cnt = 0;
		Sensor_Position_Sum = 0;

		for(i=0 ; i<6 ; i++)
		{
			if(Sensor_CONVER[i+1] != 0) Sensor_ON_cnt++;
			Sensor_Position_Sum += Sensor_CONVER[i+1] * Sensor_Position_mm[i+1];
		}
		if(Sensor_ON_cnt == 2)	Sensor_Position_Sum = Sensor_Position_Sum / 2;
		if(Sensor_ON_cnt == 3)	Sensor_Position_Sum = Sensor_Position_Sum / 4;

/*		if(Sensor_Position_Sum < 0)	Sensor_Position_Sum = - Sensor_Position_Sum;*/


		if((ready_flag == 1) && (RUN_MODE == 1) && (Sensor_CONVER[0] != 0) && (Sensor_CONVER[7] != 0) && ((Sensor_CONVER[1] == 0) || (Sensor_CONVER[2] == 0)) && ((Sensor_CONVER[5] == 0) || (Sensor_CONVER[6] == 0)))
			Stop_flag = 1;

		if((ready_flag == 1) && (RUN_MODE == 1) && ((Sensor_CONVER[1] != 0) || (Sensor_CONVER[2] != 0)) && ((Sensor_CONVER[5] != 0) || (Sensor_CONVER[6] != 0)))
			RUN_MODE = 2;

		sensor_number=0;
// 		tx0Char('\r');
// 		tx0Char('\n');
	 }

}


void Motor_Control()
{
	
	// 1700 ~ 2000
	// 2000 ~


	if((ready_flag == 0) && (Sensor_Position_Sum >= -100) && (Sensor_Position_Sum <= 100))			MOTOR_MODE = READY;
	else if((ready_flag == 0) && (Sensor_Position_Sum > 100) && (Sensor_Position_Sum <= 500))		MOTOR_MODE = R_READY;
	else if((ready_flag == 0) && (Sensor_Position_Sum > 500) && (Sensor_Position_Sum <= 700))		MOTOR_MODE = R_READY2;
	else if((ready_flag == 0) && (Sensor_Position_Sum >= -500) && (Sensor_Position_Sum < -100))		MOTOR_MODE = L_READY;
	else if((ready_flag == 0) && (Sensor_Position_Sum >= -700) && (Sensor_Position_Sum < -500))		MOTOR_MODE = L_READY2;

	else if(Stop_flag == 2)																			MOTOR_MODE = STOP;

	else if((ready_flag == 1) && (Sensor_Position_Sum >= -100) && (Sensor_Position_Sum <= 100))		MOTOR_MODE = STRAIGHT;

	else if((ready_flag == 1) && (Sensor_Position_Sum > 100) && (Sensor_Position_Sum <= 500))		MOTOR_MODE = R_STRAIGHT_CORRECTION;
	else if((ready_flag == 1) && (Sensor_Position_Sum > 500) && (Sensor_Position_Sum <= 700))		MOTOR_MODE = R_STRAIGHT_CORRECTION2;
	else if((ready_flag == 1) && (Sensor_Position_Sum > 700) && (Sensor_Position_Sum <= 950))		MOTOR_MODE = R_TURN;
	else if((ready_flag == 1) && (Sensor_Position_Sum > 950) && (Sensor_Position_Sum <= 1700))		MOTOR_MODE = R_TURN2;
	else if((ready_flag == 1) && (Sensor_Position_Sum > 1700) && (Sensor_Position_Sum <= 2000))		MOTOR_MODE = R_TURN3;
	else if((ready_flag == 1) && (Sensor_Position_Sum > 2000))										MOTOR_MODE = R_TURN4;


	else if((ready_flag == 1) && (Sensor_Position_Sum >= -500) && (Sensor_Position_Sum < -100))		MOTOR_MODE = L_STRAIGHT_CORRECTION;
	else if((ready_flag == 1) && (Sensor_Position_Sum >= -700) && (Sensor_Position_Sum < -500))		MOTOR_MODE = L_STRAIGHT_CORRECTION2;
	else if((ready_flag == 1) && (Sensor_Position_Sum >= -950) && (Sensor_Position_Sum < -700))		MOTOR_MODE = L_TURN;
	else if((ready_flag == 1) && (Sensor_Position_Sum >= -1700) && (Sensor_Position_Sum < -950))	MOTOR_MODE = L_TURN2;
	else if((ready_flag == 1) && (Sensor_Position_Sum >= -2000) && (Sensor_Position_Sum < -1700))	MOTOR_MODE = L_TURN3;
	else if((ready_flag == 1) && (Sensor_Position_Sum < -2000))										MOTOR_MODE = L_TURN4;

	
	switch(MOTOR_MODE)
	{
		case READY :
				L_OCR_target = 200;
				R_OCR_target = 200;
			break;
		case R_READY :
				L_OCR_target = 200;
				R_OCR_target = 180;
			break;
		case R_READY2 :
				L_OCR_target = 200;
				R_OCR_target = 170;
			break;
		case L_READY :
				L_OCR_target = 180;
				R_OCR_target = 200;
			break;
		case L_READY2 :
				L_OCR_target = 170;
				R_OCR_target = 200;
			break;


		case STOP :
				L_OCR_target = 30;
				R_OCR_target = 30;
			break;
		case STRAIGHT :
				L_OCR_target = 600;
				R_OCR_target = 600;
			break;

		case R_STRAIGHT_CORRECTION :
				L_OCR_target = 600;
				R_OCR_target = 580;
			break;
		case R_STRAIGHT_CORRECTION2 :
				L_OCR_target = 600;
				R_OCR_target = 550;
			break;
		case R_TURN :
				L_OCR_target = 650;
				R_OCR_target = 450;
			break;
		case R_TURN2 :
				L_OCR_target = 840;
				R_OCR_target = 170;
			break;
		case R_TURN3 :
				L_OCR_target = 900;
				R_OCR_target = 150;
			break;
		case R_TURN4 :
				L_OCR_target = 930;
				R_OCR_target = 130;
			break;

		case L_STRAIGHT_CORRECTION :
				L_OCR_target = 580;
				R_OCR_target = 600;
			break;
		case L_STRAIGHT_CORRECTION2 :
				L_OCR_target = 550;
				R_OCR_target = 600;
			break;
		case L_TURN :
				L_OCR_target = 450;
				R_OCR_target = 650;
			break;
		case L_TURN2 :
				L_OCR_target = 170;
				R_OCR_target = 840;
			break;
		case L_TURN3 :
				L_OCR_target = 150;
				R_OCR_target = 900;
			break;
		case L_TURN4 :
				L_OCR_target = 130;
				R_OCR_target = 930;
			break;

	}
	// 650 300 >> 180도 곡률로 회전 
	// turn3 950 100
	// turn 770 430


}



// void Start()
// {
// 	delays(2000);
// //	PORTA = 0x59;
// 	//	PORTA = 0x00;
// 	TIMSK |= (1<<OCIE1A); // timer1 enable
// 	ETIMSK |= (1<<OCIE3A); // timer3 enable
// 	//	delays(2000);
// 
// 	RUN_MODE = 1;
// }



ISR(INT6_vect)
{
	delays(2000);
	PORTA = 0x95;
	TIMSK |= (1<<OCIE1A); // timer1 enable
	ETIMSK |= (1<<OCIE3A); // timer3 enable

 	RUN_MODE = 1;
}

ISR(INT7_vect)
{
	PORTA = 0x00;
	TIMSK &= (0<<OCIE1A); // timer1 disable
	ETIMSK &= (0<<OCIE3A); // timer3 disable
}

void init_devices(void)
{
	//stop errant interrupts until set up
	cli(); //disable all interrupts
	XDIV  = 0x00; //xtal divider
	XMCRA = 0x00; //external memory
	port_init();
	uart0_init(); // UART 0 초기화
//	uart1_init(); // UART 1 초기화
	adc_init();
	timer_init();

	MCUCR = 0x00;
	EICRA = 0x00; //extended ext ints
	EICRB = 0xf0; //extended ext ints
	EIMSK = 0xc0;
//	TIMSK = 0x00; //timer interrupt source 
//	ETIMSK = 0x00; //extended timer interrupt sources
	sei(); //re-enable interrupts
}

int main(void)
{
	init_devices();
	
	while (1)
	{
		Sensor_RAW[sensor_number] = readAdc(sensor_number);
		Sensor_Calibration();
		if(RUN_MODE != 0)
			Motor_Control();
	}
}
